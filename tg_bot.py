import logging
import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, \
    ConversationHandler, filters
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Constants for ConversationHandler states
(
    SELECTING_ACTION,
    SELECT_BUILDING,
    SELECT_ROOM,
    SELECT_DATE,
    SELECT_TIME_START,
    SELECT_TIME_END,
    SHOW_SCHEDULE,
    FIND_AVAILABLE_ROOMS,
) = range(8)

# Weekday translation map
WEEKDAY_TRANSLATION = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥–∞",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü–∞",
    5: "—Å—É–±–±–æ—Ç–∞",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# Path to the data file
DATA_FILE = "occupied_rooms.json"

# Global data store
occupied_rooms = {}


def load_data():
    """Load room occupation data from file"""
    global occupied_rooms
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            occupied_rooms = json.load(f)
        logger.info(f"Loaded data for {len(occupied_rooms)} buildings")
    except FileNotFoundError:
        logger.error(f"Data file {DATA_FILE} not found!")
        occupied_rooms = {}
    except json.JSONDecodeError:
        logger.error(f"Error parsing data file {DATA_FILE}")
        occupied_rooms = {}


def get_class_periods():
    """Return list of class periods with start and end times"""
    return [
        ("1 –ø–∞—Ä–∞ (08:00-09:35)", "08:00", "09:35"),
        ("2 –ø–∞—Ä–∞ (09:45-11:20)", "09:45", "11:20"),
        ("3 –ø–∞—Ä–∞ (11:30-13:05)", "11:30", "13:05"),
        ("4 –ø–∞—Ä–∞ (13:30-15:05)", "13:30", "15:05"),
        ("5 –ø–∞—Ä–∞ (15:15-16:50)", "15:15", "16:50"),
        ("6 –ø–∞—Ä–∞ (17:00-18:35)", "17:00", "18:35"),
        ("7 –ø–∞—Ä–∞ (18:45-20:20)", "18:45", "20:20"),
        ("8 –ø–∞—Ä–∞ (20:30-22:05)", "20:30", "22:05")
    ]


def get_time_keyboard():
    """Create keyboard with class period time options"""
    keyboard = []

    # Get class periods
    class_periods = get_class_periods()

    for label, start_time, end_time in class_periods:
        keyboard.append([InlineKeyboardButton(
            label,
            callback_data=f"time_{start_time}_{end_time}"
        )])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_end_period_keyboard(start_period):
    """Create keyboard with end period options based on start period"""
    keyboard = []

    # Get class periods
    class_periods = get_class_periods()

    # Only show periods that come after the start period
    for i, (label, start_time, end_time) in enumerate(class_periods):
        period_num = i + 1  # Period numbers are 1-based
        if period_num >= start_period:
            keyboard.append([InlineKeyboardButton(
                label,
                callback_data=f"end_period_{period_num}"
            )])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_buildings_keyboard():
    """Create keyboard with building options"""
    buildings = sorted(occupied_rooms.keys())
    keyboard = []
    row = []
    for i, building in enumerate(buildings):
        row.append(InlineKeyboardButton(building, callback_data=f"building_{building}"))
        if (i + 1) % 3 == 0 or i == len(buildings) - 1:  # 3 buttons per row
            keyboard.append(row)
            row = []

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_rooms_keyboard(building):
    """Create keyboard with room options for a specific building"""
    if building not in occupied_rooms:
        return None

    rooms = sorted(occupied_rooms[building].keys())
    keyboard = []
    row = []
    for i, room in enumerate(rooms):
        # Just show room number without building
        room_display = room.split('-')[0]
        row.append(InlineKeyboardButton(room_display, callback_data=f"room_{room}"))
        if (i + 1) % 4 == 0 or i == len(rooms) - 1:  # 4 buttons per row
            keyboard.append(row)
            row = []

    # Add back and cancel buttons
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buildings"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    return InlineKeyboardMarkup(keyboard)


def get_date_keyboard():
    """Create keyboard with date options (next 7 days)"""
    keyboard = []
    today = datetime.now()

    for i in range(7):
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        day_name = WEEKDAY_TRANSLATION[date.weekday()]
        label = f"{date_str} ({day_name})"
        keyboard.append([InlineKeyboardButton(label, callback_data=f"date_{date.strftime('%Y-%m-%d')}")])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_academic_week(date_str, semester_start="2024-09-02"):
    """Calculate academic week number from a date"""
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    semester_start_date = datetime.strptime(semester_start, "%Y-%m-%d")

    delta_days = (date_obj - semester_start_date).days
    if delta_days < 0:
        return None

    return (delta_days // 7) + 1


def get_schedule_for_day(building_name, room_name, date_str):
    """Get schedule for a specific room on a specific date"""
    week = get_academic_week(date_str)
    if week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    if room_name not in building:
        return f"–ö–æ–º–Ω–∞—Ç–∞ {room_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {building_name}."

    room_schedule = building[room_name]

    # Filter lessons by week and weekday
    filtered_lessons = [
        lesson for lesson in room_schedule
        if lesson["weekday"] == weekday and lesson["week"] == week
    ]

    # Sort lessons by begin time
    sorted_lessons = sorted(filtered_lessons, key=lambda lesson: lesson["begin_time"])

    # Format schedule message
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {room_name} ({building_name} –∫–æ—Ä–ø—É—Å)\n"
    result += f"üóìÔ∏è –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"üìä –£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: {week}\n\n"

    if not sorted_lessons:
        result += "üïì –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
        return result

    for i, lesson in enumerate(sorted_lessons, 1):
        result += f"{i}. ‚è∞ {lesson['begin_time']} - {lesson['end_time']}\n"
        result += f"   üìö {lesson['discipline']}\n"
        result += f"   üë• –ì—Ä—É–ø–ø—ã: {', '.join(lesson['groups'])}\n"
        result += f"   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {', '.join(lesson['teacher'])}\n\n"

    return result


def find_available_rooms(building_name, date_str, start_time, end_time=None):
    """Find available rooms in a building at a specific time range"""
    week = get_academic_week(date_str)
    if week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    start_time_obj = datetime.strptime(start_time, "%H:%M")
    if end_time:
        end_time_obj = datetime.strptime(end_time, "%H:%M")
    else:
        # If no end time provided, use start time + 1.5 hours
        end_time_obj = start_time_obj + timedelta(hours=1, minutes=30)
        end_time = end_time_obj.strftime("%H:%M")

    available_rooms = []

    for room_name, room_schedule in building.items():
        is_room_available = True

        for lesson in room_schedule:
            if lesson["weekday"] == weekday and lesson["week"] == week:
                lesson_begin = datetime.strptime(lesson["begin_time"], "%H:%M")
                lesson_end = datetime.strptime(lesson["end_time"], "%H:%M")

                # Check for overlap
                if (lesson_begin < end_time_obj and lesson_end > start_time_obj):
                    is_room_available = False
                    break

        if is_room_available:
            # Just use room number without building
            room_display = room_name.split('-')[0]
            available_rooms.append(room_display)

    # Format response
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ {building_name} –∫–æ—Ä–ø—É—Å–µ\n"
    result += f"üìÖ –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"‚è∞ –í—Ä–µ–º—è: {start_time}"
    if end_time:
        result += f" - {end_time}"
    result += "\n\n"

    if available_rooms:
        # Group rooms by floor
        rooms_by_floor = {}
        for room in available_rooms:
            # Try to extract floor from room number (first digit)
            try:
                floor = room[0]
                if floor not in rooms_by_floor:
                    rooms_by_floor[floor] = []
                rooms_by_floor[floor].append(room)
            except (IndexError, ValueError):
                # If can't determine floor, put in "Other"
                if "Other" not in rooms_by_floor:
                    rooms_by_floor["Other"] = []
                rooms_by_floor["Other"].append(room)

        # Format rooms by floor
        for floor, rooms in sorted(rooms_by_floor.items()):
            result += f"üîπ {floor} —ç—Ç–∞–∂: {', '.join(sorted(rooms))}\n"

        result += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(available_rooms)} –∞—É–¥–∏—Ç–æ—Ä–∏–π"
    else:
        result += "üòî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."

    return result


def find_available_rooms_for_period_range(building_name, date_str, start_period, end_period):
    """Find rooms available for the entire period range from start_period to end_period"""
    week = get_academic_week(date_str)
    if week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    # Get class periods
    class_periods = get_class_periods()

    # Get start time of the first period and end time of the last period
    start_time = class_periods[start_period - 1][1]  # First period's start time
    end_time = class_periods[end_period - 1][2]  # Last period's end time

    start_time_obj = datetime.strptime(start_time, "%H:%M")
    end_time_obj = datetime.strptime(end_time, "%H:%M")

    available_rooms = []

    for room_name, room_schedule in building.items():
        is_room_available = True

        for lesson in room_schedule:
            if lesson["weekday"] == weekday and lesson["week"] == week:
                lesson_begin = datetime.strptime(lesson["begin_time"], "%H:%M")
                lesson_end = datetime.strptime(lesson["end_time"], "%H:%M")

                # Check for any overlap in the entire period range
                # If there's any overlap between this lesson and our period range, room is not available
                if (lesson_begin < end_time_obj and lesson_end > start_time_obj):
                    is_room_available = False
                    break

        if is_room_available:
            # Just use room number without building
            room_display = room_name.split('-')[0]
            available_rooms.append(room_display)

    # Format response
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ {building_name} –∫–æ—Ä–ø—É—Å–µ\n"
    result += f"üìÖ –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"‚è∞ –í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time} ({start_period}-{end_period} –ø–∞—Ä—ã)\n\n"

    if available_rooms:
        # Group rooms by floor
        rooms_by_floor = {}
        for room in available_rooms:
            # Try to extract floor from room number (first digit)
            try:
                floor = room[0]
                if floor not in rooms_by_floor:
                    rooms_by_floor[floor] = []
                rooms_by_floor[floor].append(room)
            except (IndexError, ValueError):
                # If can't determine floor, put in "Other"
                if "Other" not in rooms_by_floor:
                    rooms_by_floor["Other"] = []
                rooms_by_floor["Other"].append(room)

        # Format rooms by floor
        for floor, rooms in sorted(rooms_by_floor.items()):
            result += f"üîπ {floor} —ç—Ç–∞–∂: {', '.join(sorted(rooms))}\n"

        result += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(available_rooms)} –∞—É–¥–∏—Ç–æ—Ä–∏–π"
    else:
        result += "üòî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –Ω–∞ –≤–µ—Å—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    return result


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation."""
    user = update.effective_user

    # Reset user data for a new session
    context.user_data.clear()

    keyboard = [
        ["1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"],
        ["2. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É)"],
        #["3. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä)"]
    ]

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π.\n"
        "/help - –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return SELECTING_ACTION


async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle action selection."""
    text = update.message.text

    if text.startswith("1."):
        context.user_data["action"] = "view_schedule"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:",
            reply_markup=get_buildings_keyboard()
        )
        return SELECT_BUILDING

    elif text.startswith("2."):
        context.user_data["action"] = "find_available_moment"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É:",
            reply_markup=get_buildings_keyboard()
        )
        return SELECT_BUILDING

    elif text.startswith("3."):
        context.user_data["action"] = "find_available_range"
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –ø–æ–¥—Ä—è–¥:",
            reply_markup=get_buildings_keyboard()
        )
        return SELECT_BUILDING

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
        )
        return SELECTING_ACTION


async def select_building(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle building selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # Extract building ID from callback data
    building_id = query.data.split("_")[1]
    context.user_data["building"] = building_id

    if context.user_data["action"] == "view_schedule":
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: {building_id}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
            reply_markup=get_rooms_keyboard(building_id)
        )
        return SELECT_ROOM
    else:
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: {building_id}\n–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
            reply_markup=get_date_keyboard()
        )
        return SELECT_DATE


async def select_room(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle room selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    if query.data == "back_to_buildings":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:",
            reply_markup=get_buildings_keyboard()
        )
        return SELECT_BUILDING

    # Extract room ID from callback data
    room_id = query.data.split("_")[1]
    context.user_data["room"] = room_id

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {room_id}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard()
    )
    return SELECT_DATE


async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle date selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # Extract date from callback data
    date = query.data.split("_")[1]
    context.user_data["date"] = date

    if context.user_data["action"] == "view_schedule":
        # Show schedule directly
        building = context.user_data["building"]
        room = context.user_data["room"]

        schedule = get_schedule_for_day(building, room, date)
        result_text = schedule + "\n\nüëâ –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await query.edit_message_text(result_text)
        return ConversationHandler.END
    else:
        # Format date for display
        date_obj = datetime.strptime(date, "%Y-%m-%d")
        date_formatted = date_obj.strftime("%d.%m.%Y")
        weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

        # Ask for start time
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_formatted} ({weekday})\n"
            f"–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –∏–ª–∏ –≤—Ä–µ–º—è:",
            reply_markup=get_time_keyboard()
        )
        return SELECT_TIME_START


async def select_time_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle start time selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # Extract time from callback data
    parts = query.data.split("_")
    start_time = parts[1]
    context.user_data["start_time"] = start_time

    # Store end time if it's included (from class period)
    if len(parts) > 2:
        end_time = parts[2]
        context.user_data["class_end_time"] = end_time  # Store class period end time separately

    if context.user_data["action"] == "find_available_moment":
        # For single time check, use start and end time of selected class period
        building = context.user_data["building"]
        date = context.user_data["date"]

        if len(parts) > 2:
            end_time = parts[2]
            available_rooms = find_available_rooms(building, date, start_time, end_time)
        else:
            available_rooms = find_available_rooms(building, date, start_time)

        result_text = available_rooms + "\n\nüëâ –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await query.edit_message_text(result_text)
        return ConversationHandler.END
    else:
        # For time range, ask for end class period
        # Store which class period was selected (extract number from label for later display)
        for i, (label, start, end) in enumerate(get_class_periods()):
            if start == start_time and (
                    not "class_end_time" in context.user_data or end == context.user_data["class_end_time"]):
                context.user_data["start_period"] = i + 1
                break

        # Ask for ending class period
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞: {context.user_data['start_period']} –ø–∞—Ä–∞\n"
            f"–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=get_end_period_keyboard(context.user_data["start_period"])
        )
        return SELECT_TIME_END


async def select_time_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle end time or end period selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    parts = query.data.split("_")

    # Handle end period selection (for third option)
    if parts[0] == "end_period":
        end_period = int(parts[1])
        context.user_data["end_period"] = end_period

        # Get start period
        start_period = context.user_data["start_period"]

        building = context.user_data["building"]
        date = context.user_data["date"]

        # Use the specialized function for period range search
        result = find_available_rooms_for_period_range(building, date, start_period, end_period)
        result_text = result + "\n\nüëâ –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await query.edit_message_text(result_text)
        return ConversationHandler.END

    # Handle normal time selection
    else:
        # Extract time from callback data
        if len(parts) > 2:
            time = parts[2]  # End time from class period
        else:
            time = parts[1]  # Direct time

        context.user_data["end_time"] = time

        # Validate time range
        start_time = datetime.strptime(context.user_data["start_time"], "%H:%M")
        end_time = datetime.strptime(time, "%H:%M")

        if end_time <= start_time:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /start",
            )
            return ConversationHandler.END

        # Show available rooms for the time range
        building = context.user_data["building"]
        date = context.user_data["date"]
        start_time_str = context.user_data["start_time"]

        available_rooms = find_available_rooms(building, date, start_time_str, time)
        result_text = available_rooms + "\n\nüëâ –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"
        await query.edit_message_text(result_text)
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel and end the conversation."""
    if update.message:
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"

        "*–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*\n"
        "1Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É\n"
        "2Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–ø—É—Å–µ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É\n"
        "3Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–ø—É—Å–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –ø–æ–¥—Ä—è–¥\n\n"

        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "- –ù–∞–∂–º–∏—Ç–µ /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
        "- –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞—è –æ–ø—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n"
        "- –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'\n"
        "- –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫\n\n"

        "*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä:*\n"
        "1 –ø–∞—Ä–∞: 08:00-09:35\n"
        "2 –ø–∞—Ä–∞: 09:45-11:20\n"
        "3 –ø–∞—Ä–∞: 11:30-13:05\n"
        "4 –ø–∞—Ä–∞: 13:30-15:05\n"
        "5 –ø–∞—Ä–∞: 15:15-16:50\n"
        "6 –ø–∞—Ä–∞: 17:00-18:35\n"
        "7 –ø–∞—Ä–∞: 18:45-20:20\n"
        "8 –ø–∞—Ä–∞: 20:30-22:05\n\n"

        "–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π! üìö"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


def main() -> None:
    """Start the bot."""
    # Load data from file
    load_data()

    # Create the Application using environment variable
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            SELECT_BUILDING: [CallbackQueryHandler(select_building)],
            SELECT_ROOM: [CallbackQueryHandler(select_room)],
            SELECT_DATE: [CallbackQueryHandler(select_date)],
            SELECT_TIME_START: [CallbackQueryHandler(select_time_start)],
            SELECT_TIME_END: [CallbackQueryHandler(select_time_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    # Run the bot until the user presses Ctrl-C
    print("Bot started!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()