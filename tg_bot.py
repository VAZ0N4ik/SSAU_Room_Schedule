import logging
import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, \
    ConversationHandler, filters
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

"""–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –í–£–¶ –∏ –°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å"""
IGNORED_BUILDINGS = ["4", "6"]

# Constants for ConversationHandler states
(
    SELECTING_ACTION,
    SELECT_BUILDING,
    SELECT_ROOM,
    SELECT_WEEK,
    SELECT_DAY,
    SELECT_TIME_START,
    SELECT_TIME_END,
    SHOW_SCHEDULE,
    HANDLE_RESULTS,
    FIND_AVAILABLE_ROOMS,
) = range(10)

# Weekday translation map
WEEKDAY_TRANSLATION = {
    0: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–≤—Ç–æ—Ä–Ω–∏–∫",
    2: "—Å—Ä–µ–¥–∞",
    3: "—á–µ—Ç–≤–µ—Ä–≥",
    4: "–ø—è—Ç–Ω–∏—Ü–∞",
    5: "—Å—É–±–±–æ—Ç–∞",
    6: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

# Reverse weekday translation for converting from Russian to day number
WEEKDAY_TO_NUMBER = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
    "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
    "—Å—Ä–µ–¥–∞": 2,
    "—á–µ—Ç–≤–µ—Ä–≥": 3,
    "–ø—è—Ç–Ω–∏—Ü–∞": 4,
    "—Å—É–±–±–æ—Ç–∞": 5,
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
}

# Path to the data file
DATA_FILE = "occupied_rooms.json"

# Global data store
occupied_rooms = {}

# Semester start date (for calculating academic weeks)
SEMESTER_START = "2024-09-02"

async def commands_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show available commands when /commands is issued."""
    commands_text = (
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
        "/commands - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"

        "üí° *–°–æ–≤–µ—Ç:* –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '/' –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)"
    )
    await update.message.reply_text(commands_text, parse_mode="Markdown")

def calculate_current_academic_week():
    """Calculate the current academic week based on semester start"""
    today = datetime.now()
    semester_start_date = datetime.strptime(SEMESTER_START, "%Y-%m-%d")

    # Calculate days since semester start
    delta_days = (today - semester_start_date).days

    # Calculate current academic week
    if delta_days < 0:
        return 1  # If before semester start, return week 1

    current_week = (delta_days // 7) + 1
    return current_week


def load_data():
    """Load room occupation data from file"""
    global occupied_rooms
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            occupied_rooms = json.load(f)
        logger.info(f"Loaded data for {len(occupied_rooms)} buildings")
    except FileNotFoundError:
        logger.error(f"Data file {DATA_FILE} not found!")
        occupied_rooms = {}
    except json.JSONDecodeError:
        logger.error(f"Error parsing data file {DATA_FILE}")
        occupied_rooms = {}


def get_class_periods():
    """Return list of class periods with start and end times"""
    return [
        ("1 –ø–∞—Ä–∞ (08:00-09:35)", "08:00", "09:35"),
        ("2 –ø–∞—Ä–∞ (09:45-11:20)", "09:45", "11:20"),
        ("3 –ø–∞—Ä–∞ (11:30-13:05)", "11:30", "13:05"),
        ("4 –ø–∞—Ä–∞ (13:30-15:05)", "13:30", "15:05"),
        ("5 –ø–∞—Ä–∞ (15:15-16:50)", "15:15", "16:50"),
        ("6 –ø–∞—Ä–∞ (17:00-18:35)", "17:00", "18:35"),
        ("7 –ø–∞—Ä–∞ (18:45-20:20)", "18:45", "20:20"),
        ("8 –ø–∞—Ä–∞ (20:30-22:05)", "20:30", "22:05")
    ]


def get_time_keyboard():
    """Create keyboard with class period time options"""
    keyboard = []

    # Get class periods
    class_periods = get_class_periods()

    for label, start_time, end_time in class_periods:
        keyboard.append([InlineKeyboardButton(
            label,
            callback_data=f"time_{start_time}_{end_time}"
        )])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_end_period_keyboard(start_period):
    """Create keyboard with end period options based on start period"""
    keyboard = []

    # Get class periods
    class_periods = get_class_periods()

    # Only show periods that come after the start period
    for i, (label, start_time, end_time) in enumerate(class_periods):
        period_num = i + 1  # Period numbers are 1-based
        if period_num >= start_period:
            keyboard.append([InlineKeyboardButton(
                label,
                callback_data=f"end_period_{period_num}"
            )])

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_buildings_keyboard(highlight_building=None):
    """Create keyboard with building options, with optional highlighting and proper sorting"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ—Ä–ø—É—Å–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º, –∏—Å–∫–ª—é—á–∞—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ
    all_buildings = list(occupied_rooms.keys())
    buildings = [building for building in all_buildings if building not in IGNORED_BUILDINGS]

    # Sort buildings numerically (treating them as integers where possible)
    def building_sort_key(building):
        # Convert all buildings to strings first to ensure consistent comparison
        building_str = str(building)
        try:
            # Try to convert to integer for proper numerical sorting
            return (0, int(building_str))  # Tuple with 0 as first element for numbers
        except ValueError:
            # If not a number, use a tuple with 1 as first element to keep strings after numbers
            return (1, building_str)

    sorted_buildings = sorted(buildings, key=building_sort_key)

    keyboard = []
    row = []
    for i, building in enumerate(sorted_buildings):
        # Add ‚úì symbol to the previously selected building
        label = f"‚úì {building}" if building == highlight_building else building
        row.append(InlineKeyboardButton(label, callback_data=f"building_{building}"))
        if (i + 1) % 3 == 0 or i == len(sorted_buildings) - 1:  # 3 buttons per row
            keyboard.append(row)
            row = []

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_rooms_keyboard(building):
    """Create keyboard with room options for a specific building"""
    if building not in occupied_rooms:
        return None

    rooms = sorted(occupied_rooms[building].keys())
    keyboard = []
    row = []
    for i, room in enumerate(rooms):
        # Just show room number without building
        room_display = room.split('-')[0]
        row.append(InlineKeyboardButton(room_display, callback_data=f"room_{room}"))
        if (i + 1) % 4 == 0 or i == len(rooms) - 1:  # 4 buttons per row
            keyboard.append(row)
            row = []

    # Add back and cancel buttons
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_buildings"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    return InlineKeyboardMarkup(keyboard)


def get_week_keyboard(current_week):
    """Create keyboard for selecting academic week"""
    keyboard = []

    # Add navigation row first with current week indicator
    nav_row = [
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"week_prev_{current_week}"),
        InlineKeyboardButton(f"–ù–µ–¥–µ–ª—è {current_week}", callback_data=f"week_{current_week}"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"week_next_{current_week}")
    ]
    keyboard.append(nav_row)

    # Add weeks around current week (2 before and 2 after if possible)
    weeks_row = []
    for week_num in range(max(1, current_week - 2), current_week + 3):
        if week_num != current_week:  # Skip current week as it's already in nav row
            weeks_row.append(InlineKeyboardButton(str(week_num), callback_data=f"week_{week_num}"))

    # Add weeks in a single row
    if weeks_row:
        keyboard.append(weeks_row)

    # Add cancel button
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(keyboard)


def get_days_keyboard(week_number):
    """Create keyboard with day options for a specific week, excluding Sunday"""
    keyboard = []

    # Calculate date range for selected week
    semester_start = datetime.strptime(SEMESTER_START, "%Y-%m-%d")
    week_start = semester_start + timedelta(days=(week_number - 1) * 7)

    # Show only 6 days of the week (Monday through Saturday)
    for day_offset in range(6):  # 0-5 instead of 0-6
        date = week_start + timedelta(days=day_offset)
        date_str = date.strftime("%d.%m.%Y")
        day_name = WEEKDAY_TRANSLATION[date.weekday()]
        label = f"{date_str} ({day_name})"

        # Store both weekday name and date in callback data
        callback_data = f"day_{day_name}_{date.strftime('%Y-%m-%d')}"
        keyboard.append([InlineKeyboardButton(label, callback_data=callback_data)])

    # Add back and cancel buttons
    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –Ω–µ–¥–µ–ª–∏", callback_data="back_to_weeks"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    return InlineKeyboardMarkup(keyboard)


def get_academic_week(date_str, semester_start=SEMESTER_START):
    """Calculate academic week number from a date"""
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    semester_start_date = datetime.strptime(semester_start, "%Y-%m-%d")

    delta_days = (date_obj - semester_start_date).days
    if delta_days < 0:
        return None

    return (delta_days // 7) + 1


def get_schedule_for_day(building_name, room_name, date_str, academic_week=None):
    """Get schedule for a specific room on a specific date"""
    if academic_week is None:
        academic_week = get_academic_week(date_str)

    if academic_week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    if room_name not in building:
        return f"–ö–æ–º–Ω–∞—Ç–∞ {room_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {building_name}."

    room_schedule = building[room_name]

    # Filter lessons by week and weekday
    filtered_lessons = [
        lesson for lesson in room_schedule
        if lesson["weekday"] == weekday and lesson["week"] == academic_week
    ]

    # Deduplicate lessons based on time, discipline, groups and teachers
    unique_lessons = []
    seen_lessons = set()

    for lesson in filtered_lessons:
        # Create a unique key for each lesson based on its contents
        lesson_key = (
            lesson["begin_time"],
            lesson["end_time"],
            lesson["discipline"],
            tuple(sorted(lesson["groups"])),
            tuple(sorted(lesson["teacher"]))
        )

        if lesson_key not in seen_lessons:
            seen_lessons.add(lesson_key)
            unique_lessons.append(lesson)

    # Sort lessons by begin time
    sorted_lessons = sorted(unique_lessons, key=lambda lesson: lesson["begin_time"])

    # Format schedule message
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {room_name} ({building_name} –∫–æ—Ä–ø—É—Å)\n"
    result += f"üóìÔ∏è –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"üìä –£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: {academic_week}\n\n"

    if not sorted_lessons:
        result += "üïì –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
        return result

    for i, lesson in enumerate(sorted_lessons, 1):
        result += f"{i}. ‚è∞ {lesson['begin_time']} - {lesson['end_time']}\n"
        result += f"   üìö {lesson['discipline']}\n"
        result += f"   üë• –ì—Ä—É–ø–ø—ã: {', '.join(lesson['groups'])}\n"
        result += f"   üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {', '.join(lesson['teacher'])}\n\n"

    return result


def find_available_rooms(building_name, date_str, start_time, end_time=None, academic_week=None):
    """Find available rooms in a building at a specific time range"""
    if academic_week is None:
        academic_week = get_academic_week(date_str)

    if academic_week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    start_time_obj = datetime.strptime(start_time, "%H:%M")
    if end_time:
        end_time_obj = datetime.strptime(end_time, "%H:%M")
    else:
        # If no end time provided, use start time + 1.5 hours
        end_time_obj = start_time_obj + timedelta(hours=1, minutes=30)
        end_time = end_time_obj.strftime("%H:%M")

    available_rooms = []

    for room_name, room_schedule in building.items():
        is_room_available = True

        for lesson in room_schedule:
            if lesson["weekday"] == weekday and lesson["week"] == academic_week:
                lesson_begin = datetime.strptime(lesson["begin_time"], "%H:%M")
                lesson_end = datetime.strptime(lesson["end_time"], "%H:%M")

                # Check for overlap
                if (lesson_begin < end_time_obj and lesson_end > start_time_obj):
                    is_room_available = False
                    break

        if is_room_available:
            # Just use room number without building
            room_display = room_name.split('-')[0]
            available_rooms.append(room_display)

    # Format response
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ {building_name} –∫–æ—Ä–ø—É—Å–µ\n"
    result += f"üìÖ –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"üìä –£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: {academic_week}\n"
    result += f"‚è∞ –í—Ä–µ–º—è: {start_time}"
    if end_time:
        result += f" - {end_time}"
    result += "\n\n"

    if available_rooms:
        # Group rooms by floor
        rooms_by_floor = {}
        for room in available_rooms:
            # Try to extract floor from room number (first digit)
            try:
                floor = room[0]
                if floor not in rooms_by_floor:
                    rooms_by_floor[floor] = []
                rooms_by_floor[floor].append(room)
            except (IndexError, ValueError):
                # If can't determine floor, put in "Other"
                if "Other" not in rooms_by_floor:
                    rooms_by_floor["Other"] = []
                rooms_by_floor["Other"].append(room)

        # Format rooms by floor
        for floor, rooms in sorted(rooms_by_floor.items()):
            result += f"üîπ {floor} —ç—Ç–∞–∂: {', '.join(sorted(rooms))}\n"

        result += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(available_rooms)} –∞—É–¥–∏—Ç–æ—Ä–∏–π"
    else:
        result += "üòî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."

    return result


def find_available_rooms_for_period_range(building_name, date_str, start_period, end_period, academic_week=None):
    """Find rooms available for the entire period range from start_period to end_period"""
    if academic_week is None:
        academic_week = get_academic_week(date_str)

    if academic_week is None:
        return f"–î–∞—Ç–∞ {date_str} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–º–µ—Å—Ç—Ä–∞."

    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    weekday = WEEKDAY_TRANSLATION[date_obj.weekday()]

    if building_name not in occupied_rooms:
        return f"–ó–¥–∞–Ω–∏–µ {building_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    building = occupied_rooms[building_name]

    # Get class periods
    class_periods = get_class_periods()

    # Get start time of the first period and end time of the last period
    start_time = class_periods[start_period - 1][1]  # First period's start time
    end_time = class_periods[end_period - 1][2]  # Last period's end time

    start_time_obj = datetime.strptime(start_time, "%H:%M")
    end_time_obj = datetime.strptime(end_time, "%H:%M")

    available_rooms = []

    for room_name, room_schedule in building.items():
        is_room_available = True

        for lesson in room_schedule:
            if lesson["weekday"] == weekday and lesson["week"] == academic_week:
                lesson_begin = datetime.strptime(lesson["begin_time"], "%H:%M")
                lesson_end = datetime.strptime(lesson["end_time"], "%H:%M")

                # Check for any overlap in the entire period range
                # If there's any overlap between this lesson and our period range, room is not available
                if (lesson_begin < end_time_obj and lesson_end > start_time_obj):
                    is_room_available = False
                    break

        if is_room_available:
            # Just use room number without building
            room_display = room_name.split('-')[0]
            available_rooms.append(room_display)

    # Format response
    date_formatted = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d.%m.%Y")
    result = f"üîç –°–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ {building_name} –∫–æ—Ä–ø—É—Å–µ\n"
    result += f"üìÖ –î–∞—Ç–∞: {date_formatted} ({weekday})\n"
    result += f"üìä –£—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: {academic_week}\n"
    result += f"‚è∞ –í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time} ({start_period}-{end_period} –ø–∞—Ä—ã)\n\n"

    if available_rooms:
        # Group rooms by floor
        rooms_by_floor = {}
        for room in available_rooms:
            # Try to extract floor from room number (first digit)
            try:
                floor = room[0]
                if floor not in rooms_by_floor:
                    rooms_by_floor[floor] = []
                rooms_by_floor[floor].append(room)
            except (IndexError, ValueError):
                # If can't determine floor, put in "Other"
                if "Other" not in rooms_by_floor:
                    rooms_by_floor["Other"] = []
                rooms_by_floor["Other"].append(room)

        # Format rooms by floor
        for floor, rooms in sorted(rooms_by_floor.items()):
            result += f"üîπ {floor} —ç—Ç–∞–∂: {', '.join(sorted(rooms))}\n"

        result += f"\n–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(available_rooms)} –∞—É–¥–∏—Ç–æ—Ä–∏–π"
    else:
        result += "üòî –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π –Ω–∞ –≤–µ—Å—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."

    return result


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def get_results_keyboard(context):
    """Create keyboard with navigation options after showing results."""
    keyboard = []

    # –û–ø—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    action = context.user_data.get("action", "")

    if action == "view_schedule":
        # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        keyboard.append([
            InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="different_day"),
            InlineKeyboardButton("üö™ –î—Ä—É–≥–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", callback_data="different_room")
        ])
        keyboard.append([
            InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å", callback_data="different_building"),
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")
        ])
    else:
        # –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
        keyboard.append([
            InlineKeyboardButton("üìÖ –î—Ä—É–≥–æ–π –¥–µ–Ω—å", callback_data="different_day"),
            InlineKeyboardButton("‚è∞ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data="different_time")
        ])
        keyboard.append([
            InlineKeyboardButton("üè¢ –î—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å", callback_data="different_building"),
            InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")
        ])

    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation."""
    user = update.effective_user
    user_id = update.effective_user.id

    # Preserve the last building if it exists
    last_building = None
    if 'building' in context.user_data:
        last_building = context.user_data['building']

    # Reset user data for a new session but keep the last building
    context.user_data.clear()

    # Restore the last building
    if last_building:
        context.user_data['last_building'] = last_building

    keyboard = [
        ["1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"],
        ["2. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É)"],
        ["3. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä)"]  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    ]

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–π.\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return SELECTING_ACTION


async def select_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle action selection."""
    text = update.message.text

    # Check if we have a last building
    has_last_building = 'last_building' in context.user_data

    if text.startswith("1."):
        context.user_data["action"] = "view_schedule"

        if has_last_building:
            last_building = context.user_data['last_building']
            await update.message.reply_text(
                f"–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å {last_building}.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å:",
                reply_markup=get_buildings_keyboard(last_building)
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:",
                reply_markup=get_buildings_keyboard()
            )
        return SELECT_BUILDING

    elif text.startswith("2."):
        context.user_data["action"] = "find_available_moment"

        if has_last_building:
            last_building = context.user_data['last_building']
            await update.message.reply_text(
                f"–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å {last_building}.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É:",
                reply_markup=get_buildings_keyboard(last_building)
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É:",
                reply_markup=get_buildings_keyboard()
            )
        return SELECT_BUILDING

    elif text.startswith("3."):
        context.user_data["action"] = "find_available_range"

        if has_last_building:
            last_building = context.user_data['last_building']
            await update.message.reply_text(
                f"–í –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑ –≤—ã –≤—ã–±–∏—Ä–∞–ª–∏ –∫–æ—Ä–ø—É—Å {last_building}.\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –ø–æ–¥—Ä—è–¥:",
                reply_markup=get_buildings_keyboard(last_building)
            )
        else:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –ø–æ–¥—Ä—è–¥:",
                reply_markup=get_buildings_keyboard()
            )
        return SELECT_BUILDING

    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏."
        )
        return SELECTING_ACTION


async def select_building(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle building selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # Extract building ID from callback data
    building_id = query.data.split("_")[1]
    context.user_data["building"] = building_id

    if context.user_data["action"] == "view_schedule":
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: {building_id}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
            reply_markup=get_rooms_keyboard(building_id)
        )
        return SELECT_ROOM
    else:
        # Get current academic week
        current_week = calculate_current_academic_week()
        context.user_data["current_week"] = current_week

        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∫–æ—Ä–ø—É—Å: {building_id}\n–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_week_keyboard(current_week)
        )
        return SELECT_WEEK


async def select_room(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle room selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    if query.data == "back_to_buildings":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:",
            reply_markup=get_buildings_keyboard()
        )
        return SELECT_BUILDING

    # Extract room ID from callback data
    room_id = query.data.split("_")[1]
    context.user_data["room"] = room_id

    # Get current academic week
    current_week = calculate_current_academic_week()
    context.user_data["current_week"] = current_week

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: {room_id}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é:",
        reply_markup=get_week_keyboard(current_week)
    )
    return SELECT_WEEK


async def select_week(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle week selection and navigation."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    parts = query.data.split("_")
    action = parts[1]

    if action == "prev":
        # Handle previous week button
        current_week = int(parts[2])
        new_week = max(1, current_week - 1)

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_week_keyboard(new_week)
        )
        return SELECT_WEEK

    elif action == "next":
        # Handle next week button
        current_week = int(parts[2])
        new_week = current_week + 1

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_week_keyboard(new_week)
        )
        return SELECT_WEEK

    else:
        # Week selected
        week_number = int(parts[1])
        context.user_data["academic_week"] = week_number

        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è: {week_number}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_days_keyboard(week_number)
        )
        return SELECT_DAY


async def select_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle day selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    if query.data == "back_to_weeks":
        current_week = context.user_data.get("current_week", calculate_current_academic_week())
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é:",
            reply_markup=get_week_keyboard(current_week)
        )
        return SELECT_WEEK

    # Extract date info from callback data (format: day_weekday_YYYY-MM-DD)
    parts = query.data.split("_")
    weekday = parts[1]
    date_str = parts[2]

    context.user_data["weekday"] = weekday
    context.user_data["date"] = date_str

    academic_week = context.user_data["academic_week"]

    if context.user_data["action"] == "view_schedule":
        # Show schedule directly
        building = context.user_data["building"]
        room = context.user_data["room"]

        schedule = get_schedule_for_day(building, room, date_str, academic_week)

        # –í–º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await query.edit_message_text(
            schedule,
            reply_markup=get_results_keyboard(context)
        )
        return HANDLE_RESULTS
    else:
        # Format date for display
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        date_formatted = date_obj.strftime("%d.%m.%Y")

        # Ask for start time
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_formatted} ({weekday}), –Ω–µ–¥–µ–ª—è {academic_week}\n"
            f"–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –∏–ª–∏ –≤—Ä–µ–º—è:",
            reply_markup=get_time_keyboard()
        )
        return SELECT_TIME_START


async def select_time_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle start time selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    # Extract time from callback data
    parts = query.data.split("_")
    start_time = parts[1]
    context.user_data["start_time"] = start_time

    # Store end time if it's included (from class period)
    if len(parts) > 2:
        end_time = parts[2]
        context.user_data["class_end_time"] = end_time  # Store class period end time separately

    academic_week = context.user_data["academic_week"]

    if context.user_data["action"] == "find_available_moment":
        # For single time check, use start and end time of selected class period
        building = context.user_data["building"]
        date = context.user_data["date"]

        if len(parts) > 2:
            end_time = parts[2]
            available_rooms = find_available_rooms(building, date, start_time, end_time, academic_week)
        else:
            available_rooms = find_available_rooms(building, date, start_time, None, academic_week)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
        await query.edit_message_text(
            available_rooms,
            reply_markup=get_results_keyboard(context)
        )
        return HANDLE_RESULTS
    else:
        # For time range, ask for end class period
        # Store which class period was selected (extract number from label for later display)
        for i, (label, start, end) in enumerate(get_class_periods()):
            if start == start_time and (
                    not "class_end_time" in context.user_data or end == context.user_data["class_end_time"]):
                context.user_data["start_period"] = i + 1
                break

        # Ask for ending class period
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞: {context.user_data['start_period']} –ø–∞—Ä–∞\n"
            f"–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—É—é –ø–∞—Ä—É:",
            reply_markup=get_end_period_keyboard(context.user_data["start_period"])
        )
        return SELECT_TIME_END


async def select_time_end(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle end time or end period selection."""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    parts = query.data.split("_")

    # Handle end period selection (for third option)
    if parts[0] == "end":
        end_period = int(parts[2])
        context.user_data["end_period"] = end_period

        # Get start period
        start_period = context.user_data["start_period"]

        building = context.user_data["building"]
        date = context.user_data["date"]
        academic_week = context.user_data["academic_week"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if end_period < start_period:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –∫–æ–Ω–µ—á–Ω–∞—è –ø–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –ø–∞—Ä—É —Å–Ω–æ–≤–∞:",
                reply_markup=get_end_period_keyboard(start_period)
            )
            return SELECT_TIME_END

        # Use the specialized function for period range search
        result = find_available_rooms_for_period_range(building, date, start_period, end_period, academic_week)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        await query.edit_message_text(
            result,
            reply_markup=get_results_keyboard(context)
        )
        return HANDLE_RESULTS

    # Handle normal time selection
    else:
        # Extract time from callback data
        if len(parts) > 2:
            time = parts[2]  # End time from class period
        else:
            time = parts[1]  # Direct time

        context.user_data["end_time"] = time

        # Validate time range
        start_time = datetime.strptime(context.user_data["start_time"], "%H:%M")
        end_time = datetime.strptime(time, "%H:%M")

        if end_time <= start_time:
            await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ. –ù–∞–∂–º–∏—Ç–µ /start",
            )
            return ConversationHandler.END

        # Show available rooms for the time range
        building = context.user_data["building"]
        date = context.user_data["date"]
        start_time_str = context.user_data["start_time"]
        academic_week = context.user_data["academic_week"]

        available_rooms = find_available_rooms(building, date, start_time_str, time, academic_week)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        await query.edit_message_text(
            available_rooms,
            reply_markup=get_results_keyboard(context)
        )
        return HANDLE_RESULTS


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def handle_results_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle navigation from results screen."""
    query = update.callback_query
    await query.answer()

    if query.data == "new_search":
        # –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä–ø—É—Å
        if 'building' in context.user_data:
            last_building = context.user_data['building']
            context.user_data.clear()
            context.user_data['last_building'] = last_building
        else:
            context.user_data.clear()

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º inline –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_text(
            "–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫...",
            reply_markup=None
        )

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            ["1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"],
            ["2. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É)"],
            ["3. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä)"]
        ]

        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return SELECTING_ACTION

    elif query.data == "different_day":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–ø—É—Å–∞/–∞—É–¥–∏—Ç–æ—Ä–∏–∏
        academic_week = context.user_data.get("academic_week", calculate_current_academic_week())

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
            reply_markup=get_days_keyboard(academic_week)
        )
        return SELECT_DAY

    elif query.data == "different_room":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥—Ä—É–≥–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–ø—É—Å–∞
        building = context.user_data["building"]

        await query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ –∫–æ—Ä–ø—É—Å–µ {building}:",
            reply_markup=get_rooms_keyboard(building)
        )
        return SELECT_ROOM

    elif query.data == "different_building":
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞
        current_building = context.user_data.get("building")

        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:",
            reply_markup=get_buildings_keyboard(current_building)
        )
        return SELECT_BUILDING

    elif query.data == "different_time":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ—Ä–ø—É—Å–∞/–¥–Ω—è
        date_str = context.user_data.get("date")
        weekday = context.user_data.get("weekday")
        academic_week = context.user_data.get("academic_week")

        if date_str and weekday and academic_week:
            date_obj = datetime.strptime(date_str, "%Y-%m-%d")
            date_formatted = date_obj.strftime("%d.%m.%Y")

            await query.edit_message_text(
                f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_formatted} ({weekday}), –Ω–µ–¥–µ–ª—è {academic_week}\n"
                f"–í—ã–±–µ—Ä–∏ –ø–∞—Ä—É –∏–ª–∏ –≤—Ä–µ–º—è:",
                reply_markup=get_time_keyboard()
            )
            return SELECT_TIME_START
        else:
            # –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=None
            )
            return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel and end the conversation."""
    if update.message:
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
        )
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    return ConversationHandler.END


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Display the main menu when /menu command is issued."""
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä–ø—É—Å
    last_building = None
    if 'building' in context.user_data:
        last_building = context.user_data['building']

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—Ä–ø—É—Å
    context.user_data.clear()
    if last_building:
        context.user_data['last_building'] = last_building

    keyboard = [
        ["1. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"],
        ["2. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É)"],
        ["3. –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä)"]
    ]

    await update.message.reply_text(
        f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìã\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return SELECTING_ACTION


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç)\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"

        "*–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*\n"
        "1Ô∏è‚É£ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –Ω–µ–¥–µ–ª—é\n"
        "2Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–ø—É—Å–µ –Ω–∞ –æ–¥–Ω—É –ø–∞—Ä—É\n"
        "3Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ—Ä–ø—É—Å–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –ø–æ–¥—Ä—è–¥\n\n"

        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ (1, 2 –∏–ª–∏ 3)\n"
        "- –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞—è –æ–ø—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n"
        "- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å, –∑–∞—Ç–µ–º —É—á–µ–±–Ω—É—é –Ω–µ–¥–µ–ª—é, –∑–∞—Ç–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
        "- –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚¨ÖÔ∏è –∏ ‚û°Ô∏è\n\n"

        "*–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:*\n"
        "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n"
        "- üìÖ *–î—Ä—É–≥–æ–π –¥–µ–Ω—å* - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –¥–Ω—è (–≤ —Ç–æ–º –∂–µ –∫–æ—Ä–ø—É—Å–µ/–∞—É–¥–∏—Ç–æ—Ä–∏–∏)\n"
        "- üö™ *–î—Ä—É–≥–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è* - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ —Ç–æ–º –∂–µ –∫–æ—Ä–ø—É—Å–µ\n"
        "- üè¢ *–î—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å* - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å\n"
        "- ‚è∞ *–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è* - –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π\n"
        "- üîÑ *–ù–æ–≤—ã–π –ø–æ–∏—Å–∫* - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n"

        "*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä:*\n"
        "1 –ø–∞—Ä–∞: 08:00-09:35\n"
        "2 –ø–∞—Ä–∞: 09:45-11:20\n"
        "3 –ø–∞—Ä–∞: 11:30-13:05\n"
        "4 –ø–∞—Ä–∞: 13:30-15:05\n"
        "5 –ø–∞—Ä–∞: 15:15-16:50\n"
        "6 –ø–∞—Ä–∞: 17:00-18:35\n"
        "7 –ø–∞—Ä–∞: 18:45-20:20\n"
        "8 –ø–∞—Ä–∞: 20:30-22:05\n\n"

        "*–°–æ–≤–µ—Ç—ã:*\n"
        "- –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ—Ä–ø—É—Å –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –≤–º–µ—Å—Ç–æ /start –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é\n"
        "- –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–∞—Ä—É, –∑–∞—Ç–µ–º –∫–æ–Ω–µ—á–Ω—É—é\n"
        "- –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '/' –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /commands –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n\n"

        "–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–π! üìö"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def setup_commands(application: Application) -> None:
    """Setup bot commands in Telegram UI."""
    commands = [
        ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        ("menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ("help", "–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"),
        ("commands", "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        ("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é")
    ]

    await application.bot.set_my_commands(commands)
    logger.info("Bot commands have been set up")


async def post_init(application: Application) -> None:
    """Actions to execute once the bot has started."""
    await setup_commands(application)


def main() -> None:
    """Start the bot."""
    # Load data from file
    load_data()

    # Create the Application using environment variable with post_init callback
    application = Application.builder().token(os.getenv("BOT_TOKEN")).post_init(post_init).build()

    # Add conversation handler with expanded states
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("menu", menu_command),
        ],
        states={
            SELECTING_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            SELECT_BUILDING: [CallbackQueryHandler(select_building)],
            SELECT_ROOM: [CallbackQueryHandler(select_room)],
            SELECT_WEEK: [CallbackQueryHandler(select_week)],
            SELECT_DAY: [CallbackQueryHandler(select_day)],
            SELECT_TIME_START: [CallbackQueryHandler(select_time_start)],
            SELECT_TIME_END: [CallbackQueryHandler(select_time_end)],
            HANDLE_RESULTS: [CallbackQueryHandler(handle_results_navigation)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("menu", menu_command),
        ],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("commands", commands_command))

    # Run the bot until the user presses Ctrl-C
    print("Bot started!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()